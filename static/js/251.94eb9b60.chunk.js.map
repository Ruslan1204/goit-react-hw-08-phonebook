{"version":3,"file":"static/js/251.94eb9b60.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","Redux/contact/contactsSelectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"bloc\":\"ContactForm_bloc__+t8Le\"};","export const getItemsContacts = state => state.contacts.items;\nexport const getFilterContacts = state => state.filter;\n","import { useState } from 'react';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'Redux/contact/contactsOperations';\nimport * as contactsSelectors from '../../Redux/contact/contactsSelectors';\n\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const items = useSelector(contactsSelectors.getItemsContacts);\n\n\n\n  const handleAddContacts = () => {\n    const mapName = items\n      .map(item => {\n        return item.name;\n      })\n      .join('')\n      .includes(name);\n    if (!mapName) {\n      dispatch(addContacts({ name, number }));\n    } else {\n      return alert(`${name} is already in contacts.`);\n\n    }\n  };\n\n  const handleChangeForm = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    handleAddContacts(name, number);\n\n    setName('');\n    setNumber('');\n\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <p>Name</p>\n          <input\n            onChange={handleChangeForm}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label>\n          <p>Number</p>\n          <input\n            onChange={handleChangeForm}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.bloc} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChangeForm = evt => {\n//     const { name, value } = evt.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     const { name, number} = this.state;\n\n//     this.props.onAdd(name, number);\n\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <div>\n//         <form onSubmit={this.handleSubmit}>\n//           <label>\n//             <p>Name</p>\n//             <input\n//               onChange={this.handleChangeForm}\n//               type=\"text\"\n//               name=\"name\"\n//               value={name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//             />\n//           </label>\n\n//           <label>\n//             <p>Number</p>\n//             <input\n//               onChange={this.handleChangeForm}\n//               type=\"tel\"\n//               name=\"number\"\n//               value={number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//             />\n//           </label>\n//           <button className={css.bloc} type=\"submit\">Add contact</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\"};","import PropTypes from 'prop-types';\nimport css from '../ContactList/ContactList.module.css';\n\nexport const ContactItem = ({ name, number, onDelete }) => {\n  return (\n    <li className={css.item}>\n      <p>{name}</p>\n      <p>{number}</p>\n      <button type=\"button\" onClick={onDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.ropTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func,\n};\n","// import PropTypes from 'prop-types';\nimport css from '../ContactList/ContactList.module.css';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { contactsDeleteAction } from 'Redux/contacts.slice';\nimport { useEffect } from 'react';\n\nimport * as contactsOperations from '../../Redux/contact/contactsOperations';\nimport * as contactsSelectors from '../../Redux/contact/contactsSelectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilterContacts);\n  const items = useSelector(contactsSelectors.getItemsContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = id => {\n    // dispatch(contactsDeleteAction(id));\n    dispatch(contactsOperations.deleteContacts(id));\n  };\n\n  const filterContacts = items.filter(item => {\n    return item.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <>\n      {items.length > 0 && (\n        <ul className={css.list}>\n          {filterContacts.map(({ id, name, number }) => {\n            const deleteContact = () => {\n              handleDeleteContact(id);\n            };\n            return (\n              <ContactItem\n                key={id}\n                name={name}\n                number={number}\n                onDelete={deleteContact}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\n// ContactList.propTypes = {\n//   // contacts: PropTypes.array.isRequired,\n//   // onDelete: PropTypes.func.isRequired,\n// };\n","import { contactsFilterAction } from 'Redux/filter.slice';\n// import PropTypes from 'prop-types';\n// import { filterContacts } from 'Redux/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as contactsSelectors from '../../Redux/contact/contactsSelectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilterContacts);\n\n  const changeFilter = evt => {\n    const { value } = evt.target;\n    // dispatch(contactsFilterAction(value));\n    dispatch(contactsFilterAction(value));\n  };\n\n  return (\n    <label>\n      <p>Find contacts by name</p>\n      <input type=\"text\" value={filter} onChange={changeFilter} />\n    </label>\n  );\n};\n\n// Filter.propTypes = {\n//   // filter: PropTypes.string.isRequired,\n//   // onChange: PropTypes.func,\n// };\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n// import { useDispatch, useSelector } from 'react-redux';\nimport css from '../components/App.module.css';\n\nexport default function Contacts() {\n  //   const dispatch = useDispatch();\n  //   const isLoading = useSelector(selectLoading);\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  // }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      {/* <div>{isLoading && 'Request in progress...'}</div> */}\n      <div className={css.container}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        <ContactList />\n      </div>\n    </>\n  );\n}\n"],"names":["getItemsContacts","state","contacts","items","getFilterContacts","filter","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","contactsSelectors","handleChangeForm","evt","target","value","onSubmit","event","preventDefault","form","map","item","join","includes","alert","addContacts","handleAddContacts","reset","onChange","type","pattern","title","required","className","css","ContactItem","onDelete","onClick","ropTypes","PropTypes","ContactList","useEffect","contactsOperations","filterContacts","toLowerCase","length","id","handleDeleteContact","Filter","contactsFilterAction","Contacts","Helmet"],"sourceRoot":""}